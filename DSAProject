#include <iostream>
using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;

    Node(int val) : key(val), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
public:
    Node* root;

    BinarySearchTree() : root(nullptr) {}

    Node* insert(Node* node, int key) {
        if (!node) return new Node(key);
        if (key < node->key)
            node->left = insert(node->left, key);
        else if (key > node->key)
            node->right = insert(node->right, key);
        return node;
    }

    Node* search(Node* node, int key) {
        if (!node || node->key == key) return node;
        if (key < node->key)
            return search(node->left, key);
        return search(node->right, key);
    }

    Node* deleteNode(Node* root, int key) {
        if (!root) return root;
        if (key < root->key)
            root->left = deleteNode(root->left, key);
        else if (key > root->key)
            root->right = deleteNode(root->right, key);
        else {
            if (!root->left) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (!root->right) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            Node* temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
        return root;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr)
            current = current->left;
        return current;
    }

    void inOrder(Node* root) {
        if (!root) return;
        inOrder(root->left);
        cout << root->key << " ";
        inOrder(root->right);
    }

    void preOrder(Node* root) {
        if (!root) return;
        cout << root->key << " ";
        preOrder(root->left);
        preOrder(root->right);
    }

    void postOrder(Node* root) {
        if (!root) return;
        postOrder(root->left);
        postOrder(root->right);
        cout << root->key << " ";
    }
};

int main() {
    BinarySearchTree bst;
    bst.root = bst.insert(bst.root, 50);
    bst.insert(bst.root, 30);
    bst.insert(bst.root, 20);
    bst.insert(bst.root, 40);
    bst.insert(bst.root, 70);
    bst.insert(bst.root, 60);
    bst.insert(bst.root, 80);

    cout << "InOrder traversal: ";
    bst.inOrder(bst.root);
    cout << endl;

    cout << "PreOrder traversal: ";
    bst.preOrder(bst.root);
    cout << endl;

    cout << "PostOrder traversal: ";
    bst.postOrder(bst.root);
    cout << endl;

    cout << "Deleting 20\n";
    bst.root = bst.deleteNode(bst.root, 20);
    cout << "InOrder traversal: ";
    bst.inOrder(bst.root);
    cout << endl;

    return 0;
}
